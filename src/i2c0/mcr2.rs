# [doc = "Register `MCR2` reader"] pub struct R (crate :: R < MCR2_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < MCR2_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < MCR2_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < MCR2_SPEC >) -> Self { R (reader) } } # [doc = "Register `MCR2` writer"] pub struct W (crate :: W < MCR2_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < MCR2_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < MCR2_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < MCR2_SPEC >) -> Self { W (writer) } } # [doc = "Field `I2C_MCR2_GFPW` reader - I2C Glitch Filter Pulse Width"] pub type I2C_MCR2_GFPW_R = crate :: FieldReader < u8 , I2C_MCR2_GFPW_A > ; # [doc = "I2C Glitch Filter Pulse Width\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum I2C_MCR2_GFPW_A { # [doc = "0: Bypass"] I2C_MCR2_GFPW_BYPASS = 0 , # [doc = "1: 1 clock"] I2C_MCR2_GFPW_1 = 1 , # [doc = "2: 2 clocks"] I2C_MCR2_GFPW_2 = 2 , # [doc = "3: 3 clocks"] I2C_MCR2_GFPW_3 = 3 , # [doc = "4: 4 clocks"] I2C_MCR2_GFPW_4 = 4 , # [doc = "5: 8 clocks"] I2C_MCR2_GFPW_8 = 5 , # [doc = "6: 16 clocks"] I2C_MCR2_GFPW_16 = 6 , # [doc = "7: 31 clocks"] I2C_MCR2_GFPW_31 = 7 , } impl From < I2C_MCR2_GFPW_A > for u8 { # [inline (always)] fn from (variant : I2C_MCR2_GFPW_A) -> Self { variant as _ } } impl I2C_MCR2_GFPW_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub fn variant (& self) -> I2C_MCR2_GFPW_A { match self . bits { 0 => I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_BYPASS , 1 => I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_1 , 2 => I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_2 , 3 => I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_3 , 4 => I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_4 , 5 => I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_8 , 6 => I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_16 , 7 => I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_31 , _ => unreachable ! () , } } # [doc = "Checks if the value of the field is `I2C_MCR2_GFPW_BYPASS`"] # [inline (always)] pub fn is_i2c_mcr2_gfpw_bypass (& self) -> bool { * self == I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_BYPASS } # [doc = "Checks if the value of the field is `I2C_MCR2_GFPW_1`"] # [inline (always)] pub fn is_i2c_mcr2_gfpw_1 (& self) -> bool { * self == I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_1 } # [doc = "Checks if the value of the field is `I2C_MCR2_GFPW_2`"] # [inline (always)] pub fn is_i2c_mcr2_gfpw_2 (& self) -> bool { * self == I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_2 } # [doc = "Checks if the value of the field is `I2C_MCR2_GFPW_3`"] # [inline (always)] pub fn is_i2c_mcr2_gfpw_3 (& self) -> bool { * self == I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_3 } # [doc = "Checks if the value of the field is `I2C_MCR2_GFPW_4`"] # [inline (always)] pub fn is_i2c_mcr2_gfpw_4 (& self) -> bool { * self == I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_4 } # [doc = "Checks if the value of the field is `I2C_MCR2_GFPW_8`"] # [inline (always)] pub fn is_i2c_mcr2_gfpw_8 (& self) -> bool { * self == I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_8 } # [doc = "Checks if the value of the field is `I2C_MCR2_GFPW_16`"] # [inline (always)] pub fn is_i2c_mcr2_gfpw_16 (& self) -> bool { * self == I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_16 } # [doc = "Checks if the value of the field is `I2C_MCR2_GFPW_31`"] # [inline (always)] pub fn is_i2c_mcr2_gfpw_31 (& self) -> bool { * self == I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_31 } } # [doc = "Field `I2C_MCR2_GFPW` writer - I2C Glitch Filter Pulse Width"] pub type I2C_MCR2_GFPW_W < 'a , const O : u8 > = crate :: FieldWriterSafe < 'a , u32 , MCR2_SPEC , u8 , I2C_MCR2_GFPW_A , 3 , O > ; impl < 'a , const O : u8 > I2C_MCR2_GFPW_W < 'a , O > { # [doc = "Bypass"] # [inline (always)] pub fn i2c_mcr2_gfpw_bypass (self) -> & 'a mut W { self . variant (I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_BYPASS) } # [doc = "1 clock"] # [inline (always)] pub fn i2c_mcr2_gfpw_1 (self) -> & 'a mut W { self . variant (I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_1) } # [doc = "2 clocks"] # [inline (always)] pub fn i2c_mcr2_gfpw_2 (self) -> & 'a mut W { self . variant (I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_2) } # [doc = "3 clocks"] # [inline (always)] pub fn i2c_mcr2_gfpw_3 (self) -> & 'a mut W { self . variant (I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_3) } # [doc = "4 clocks"] # [inline (always)] pub fn i2c_mcr2_gfpw_4 (self) -> & 'a mut W { self . variant (I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_4) } # [doc = "8 clocks"] # [inline (always)] pub fn i2c_mcr2_gfpw_8 (self) -> & 'a mut W { self . variant (I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_8) } # [doc = "16 clocks"] # [inline (always)] pub fn i2c_mcr2_gfpw_16 (self) -> & 'a mut W { self . variant (I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_16) } # [doc = "31 clocks"] # [inline (always)] pub fn i2c_mcr2_gfpw_31 (self) -> & 'a mut W { self . variant (I2C_MCR2_GFPW_A :: I2C_MCR2_GFPW_31) } } impl R { # [doc = "Bits 4:6 - I2C Glitch Filter Pulse Width"] # [inline (always)] pub fn i2c_mcr2_gfpw (& self) -> I2C_MCR2_GFPW_R { I2C_MCR2_GFPW_R :: new (((self . bits >> 4) & 7) as u8) } } impl W { # [doc = "Bits 4:6 - I2C Glitch Filter Pulse Width"] # [inline (always)] # [must_use] pub fn i2c_mcr2_gfpw (& mut self) -> I2C_MCR2_GFPW_W < 4 > { I2C_MCR2_GFPW_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "I2C Master Configuration 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcr2](index.html) module"] pub struct MCR2_SPEC ; impl crate :: RegisterSpec for MCR2_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [mcr2::R](R) reader structure"] impl crate :: Readable for MCR2_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [mcr2::W](W) writer structure"] impl crate :: Writable for MCR2_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets MCR2 to value 0"] impl crate :: Resettable for MCR2_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }