# [doc = "Register `CHASGN` reader"] pub struct R (crate :: R < CHASGN_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < CHASGN_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < CHASGN_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < CHASGN_SPEC >) -> Self { R (reader) } } # [doc = "Register `CHASGN` writer"] pub struct W (crate :: W < CHASGN_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CHASGN_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < CHASGN_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < CHASGN_SPEC >) -> Self { W (writer) } } # [doc = "Field `UDMA_CHASGN` reader - Channel \\[n\\]
Assignment Select"] pub type UDMA_CHASGN_R = crate :: FieldReader < u32 , UDMA_CHASGN_A > ; # [doc = "Channel \\[n\\]
Assignment Select\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u32)] pub enum UDMA_CHASGN_A { # [doc = "0: Use the primary channel assignment"] UDMA_CHASGN_PRIMARY = 0 , # [doc = "1: Use the secondary channel assignment"] UDMA_CHASGN_SECONDARY = 1 , } impl From < UDMA_CHASGN_A > for u32 { # [inline (always)] fn from (variant : UDMA_CHASGN_A) -> Self { variant as _ } } impl UDMA_CHASGN_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub fn variant (& self) -> Option < UDMA_CHASGN_A > { match self . bits { 0 => Some (UDMA_CHASGN_A :: UDMA_CHASGN_PRIMARY) , 1 => Some (UDMA_CHASGN_A :: UDMA_CHASGN_SECONDARY) , _ => None , } } # [doc = "Checks if the value of the field is `UDMA_CHASGN_PRIMARY`"] # [inline (always)] pub fn is_udma_chasgn_primary (& self) -> bool { * self == UDMA_CHASGN_A :: UDMA_CHASGN_PRIMARY } # [doc = "Checks if the value of the field is `UDMA_CHASGN_SECONDARY`"] # [inline (always)] pub fn is_udma_chasgn_secondary (& self) -> bool { * self == UDMA_CHASGN_A :: UDMA_CHASGN_SECONDARY } } # [doc = "Field `UDMA_CHASGN` writer - Channel \\[n\\]
Assignment Select"] pub type UDMA_CHASGN_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , CHASGN_SPEC , u32 , UDMA_CHASGN_A , 32 , O > ; impl < 'a , const O : u8 > UDMA_CHASGN_W < 'a , O > { # [doc = "Use the primary channel assignment"] # [inline (always)] pub fn udma_chasgn_primary (self) -> & 'a mut W { self . variant (UDMA_CHASGN_A :: UDMA_CHASGN_PRIMARY) } # [doc = "Use the secondary channel assignment"] # [inline (always)] pub fn udma_chasgn_secondary (self) -> & 'a mut W { self . variant (UDMA_CHASGN_A :: UDMA_CHASGN_SECONDARY) } } impl R { # [doc = "Bits 0:31 - Channel \\[n\\]
Assignment Select"] # [inline (always)] pub fn udma_chasgn (& self) -> UDMA_CHASGN_R { UDMA_CHASGN_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - Channel \\[n\\]
Assignment Select"] # [inline (always)] # [must_use] pub fn udma_chasgn (& mut self) -> UDMA_CHASGN_W < 0 > { UDMA_CHASGN_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "DMA Channel Assignment\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chasgn](index.html) module"] pub struct CHASGN_SPEC ; impl crate :: RegisterSpec for CHASGN_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [chasgn::R](R) reader structure"] impl crate :: Readable for CHASGN_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [chasgn::W](W) writer structure"] impl crate :: Writable for CHASGN_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CHASGN to value 0"] impl crate :: Resettable for CHASGN_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }