# [doc = "Register `SSIZE` reader"] pub struct R (crate :: R < SSIZE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < SSIZE_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < SSIZE_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < SSIZE_SPEC >) -> Self { R (reader) } } # [doc = "Register `SSIZE` writer"] pub struct W (crate :: W < SSIZE_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < SSIZE_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < SSIZE_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < SSIZE_SPEC >) -> Self { W (writer) } } # [doc = "Field `FLASH_SSIZE_SIZE` reader - SRAM Size"] pub type FLASH_SSIZE_SIZE_R = crate :: FieldReader < u16 , FLASH_SSIZE_SIZE_A > ; # [doc = "SRAM Size\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u16)] pub enum FLASH_SSIZE_SIZE_A { # [doc = "127: 32 KB of SRAM"] FLASH_SSIZE_SIZE_32KB = 127 , } impl From < FLASH_SSIZE_SIZE_A > for u16 { # [inline (always)] fn from (variant : FLASH_SSIZE_SIZE_A) -> Self { variant as _ } } impl FLASH_SSIZE_SIZE_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub fn variant (& self) -> Option < FLASH_SSIZE_SIZE_A > { match self . bits { 127 => Some (FLASH_SSIZE_SIZE_A :: FLASH_SSIZE_SIZE_32KB) , _ => None , } } # [doc = "Checks if the value of the field is `FLASH_SSIZE_SIZE_32KB`"] # [inline (always)] pub fn is_flash_ssize_size_32kb (& self) -> bool { * self == FLASH_SSIZE_SIZE_A :: FLASH_SSIZE_SIZE_32KB } } # [doc = "Field `FLASH_SSIZE_SIZE` writer - SRAM Size"] pub type FLASH_SSIZE_SIZE_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , SSIZE_SPEC , u16 , FLASH_SSIZE_SIZE_A , 16 , O > ; impl < 'a , const O : u8 > FLASH_SSIZE_SIZE_W < 'a , O > { # [doc = "32 KB of SRAM"] # [inline (always)] pub fn flash_ssize_size_32kb (self) -> & 'a mut W { self . variant (FLASH_SSIZE_SIZE_A :: FLASH_SSIZE_SIZE_32KB) } } impl R { # [doc = "Bits 0:15 - SRAM Size"] # [inline (always)] pub fn flash_ssize_size (& self) -> FLASH_SSIZE_SIZE_R { FLASH_SSIZE_SIZE_R :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15 - SRAM Size"] # [inline (always)] # [must_use] pub fn flash_ssize_size (& mut self) -> FLASH_SSIZE_SIZE_W < 0 > { FLASH_SSIZE_SIZE_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "SRAM Size\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ssize](index.html) module"] pub struct SSIZE_SPEC ; impl crate :: RegisterSpec for SSIZE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ssize::R](R) reader structure"] impl crate :: Readable for SSIZE_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ssize::W](W) writer structure"] impl crate :: Writable for SSIZE_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SSIZE to value 0"] impl crate :: Resettable for SSIZE_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }