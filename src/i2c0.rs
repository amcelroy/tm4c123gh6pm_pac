# [doc = r"Register block"] # [repr (C)] pub struct RegisterBlock { # [doc = "0x00 - I2C Master Slave Address"] pub msa : MSA , _reserved_1_mcs : [u8 ; 0x04] , # [doc = "0x08 - I2C Master Data"] pub mdr : MDR , # [doc = "0x0c - I2C Master Timer Period"] pub mtpr : MTPR , # [doc = "0x10 - I2C Master Interrupt Mask"] pub mimr : MIMR , # [doc = "0x14 - I2C Master Raw Interrupt Status"] pub mris : MRIS , # [doc = "0x18 - I2C Master Masked Interrupt Status"] pub mmis : MMIS , # [doc = "0x1c - I2C Master Interrupt Clear"] pub micr : MICR , # [doc = "0x20 - I2C Master Configuration"] pub mcr : MCR , # [doc = "0x24 - I2C Master Clock Low Timeout Count"] pub mclkocnt : MCLKOCNT , _reserved10 : [u8 ; 0x04] , # [doc = "0x2c - I2C Master Bus Monitor"] pub mbmon : MBMON , _reserved11 : [u8 ; 0x08] , # [doc = "0x38 - I2C Master Configuration 2"] pub mcr2 : MCR2 , _reserved12 : [u8 ; 0x07c4] , # [doc = "0x800 - I2C Slave Own Address"] pub soar : SOAR , _reserved_13_scsr : [u8 ; 0x04] , # [doc = "0x808 - I2C Slave Data"] pub sdr : SDR , # [doc = "0x80c - I2C Slave Interrupt Mask"] pub simr : SIMR , # [doc = "0x810 - I2C Slave Raw Interrupt Status"] pub sris : SRIS , # [doc = "0x814 - I2C Slave Masked Interrupt Status"] pub smis : SMIS , # [doc = "0x818 - I2C Slave Interrupt Clear"] pub sicr : SICR , # [doc = "0x81c - I2C Slave Own Address 2"] pub soar2 : SOAR2 , # [doc = "0x820 - I2C Slave ACK Control"] pub sackctl : SACKCTL , _reserved21 : [u8 ; 0x079c] , # [doc = "0xfc0 - I2C Peripheral Properties"] pub pp : PP , # [doc = "0xfc4 - I2C Peripheral Configuration"] pub pc : PC , } impl RegisterBlock { # [doc = "0x04 - I2C Master Control/Status"] # [inline (always)] pub const fn i2c0_alt_mcs (& self) -> & I2C0_ALT_MCS { unsafe { & * (self as * const Self) . cast :: < u8 > () . add (4usize) . cast () } } # [doc = "0x04 - I2C Master Control/Status"] # [inline (always)] pub const fn mcs (& self) -> & MCS { unsafe { & * (self as * const Self) . cast :: < u8 > () . add (4usize) . cast () } } # [doc = "0x804 - I2C Slave Control/Status"] # [inline (always)] pub const fn i2c0_alt_scsr (& self) -> & I2C0_ALT_SCSR { unsafe { & * (self as * const Self) . cast :: < u8 > () . add (2052usize) . cast () } } # [doc = "0x804 - I2C Slave Control/Status"] # [inline (always)] pub const fn scsr (& self) -> & SCSR { unsafe { & * (self as * const Self) . cast :: < u8 > () . add (2052usize) . cast () } } } # [doc = "MSA (rw) register accessor: an alias for `Reg<MSA_SPEC>`"] pub type MSA = crate :: Reg < msa :: MSA_SPEC > ; # [doc = "I2C Master Slave Address"] pub mod msa ; # [doc = "MCS (rw) register accessor: an alias for `Reg<MCS_SPEC>`"] pub type MCS = crate :: Reg < mcs :: MCS_SPEC > ; # [doc = "I2C Master Control/Status"] pub mod mcs ; # [doc = "I2C0_ALT_MCS (rw) register accessor: an alias for `Reg<I2C0_ALT_MCS_SPEC>`"] pub type I2C0_ALT_MCS = crate :: Reg < i2c0_alt_mcs :: I2C0_ALT_MCS_SPEC > ; # [doc = "I2C Master Control/Status"] pub mod i2c0_alt_mcs ; # [doc = "MDR (rw) register accessor: an alias for `Reg<MDR_SPEC>`"] pub type MDR = crate :: Reg < mdr :: MDR_SPEC > ; # [doc = "I2C Master Data"] pub mod mdr ; # [doc = "MTPR (rw) register accessor: an alias for `Reg<MTPR_SPEC>`"] pub type MTPR = crate :: Reg < mtpr :: MTPR_SPEC > ; # [doc = "I2C Master Timer Period"] pub mod mtpr ; # [doc = "MIMR (rw) register accessor: an alias for `Reg<MIMR_SPEC>`"] pub type MIMR = crate :: Reg < mimr :: MIMR_SPEC > ; # [doc = "I2C Master Interrupt Mask"] pub mod mimr ; # [doc = "MRIS (rw) register accessor: an alias for `Reg<MRIS_SPEC>`"] pub type MRIS = crate :: Reg < mris :: MRIS_SPEC > ; # [doc = "I2C Master Raw Interrupt Status"] pub mod mris ; # [doc = "MMIS (rw) register accessor: an alias for `Reg<MMIS_SPEC>`"] pub type MMIS = crate :: Reg < mmis :: MMIS_SPEC > ; # [doc = "I2C Master Masked Interrupt Status"] pub mod mmis ; # [doc = "MICR (w) register accessor: an alias for `Reg<MICR_SPEC>`"] pub type MICR = crate :: Reg < micr :: MICR_SPEC > ; # [doc = "I2C Master Interrupt Clear"] pub mod micr ; # [doc = "MCR (rw) register accessor: an alias for `Reg<MCR_SPEC>`"] pub type MCR = crate :: Reg < mcr :: MCR_SPEC > ; # [doc = "I2C Master Configuration"] pub mod mcr ; # [doc = "MCLKOCNT (rw) register accessor: an alias for `Reg<MCLKOCNT_SPEC>`"] pub type MCLKOCNT = crate :: Reg < mclkocnt :: MCLKOCNT_SPEC > ; # [doc = "I2C Master Clock Low Timeout Count"] pub mod mclkocnt ; # [doc = "MBMON (rw) register accessor: an alias for `Reg<MBMON_SPEC>`"] pub type MBMON = crate :: Reg < mbmon :: MBMON_SPEC > ; # [doc = "I2C Master Bus Monitor"] pub mod mbmon ; # [doc = "MCR2 (rw) register accessor: an alias for `Reg<MCR2_SPEC>`"] pub type MCR2 = crate :: Reg < mcr2 :: MCR2_SPEC > ; # [doc = "I2C Master Configuration 2"] pub mod mcr2 ; # [doc = "SOAR (rw) register accessor: an alias for `Reg<SOAR_SPEC>`"] pub type SOAR = crate :: Reg < soar :: SOAR_SPEC > ; # [doc = "I2C Slave Own Address"] pub mod soar ; # [doc = "SCSR (rw) register accessor: an alias for `Reg<SCSR_SPEC>`"] pub type SCSR = crate :: Reg < scsr :: SCSR_SPEC > ; # [doc = "I2C Slave Control/Status"] pub mod scsr ; # [doc = "I2C0_ALT_SCSR (rw) register accessor: an alias for `Reg<I2C0_ALT_SCSR_SPEC>`"] pub type I2C0_ALT_SCSR = crate :: Reg < i2c0_alt_scsr :: I2C0_ALT_SCSR_SPEC > ; # [doc = "I2C Slave Control/Status"] pub mod i2c0_alt_scsr ; # [doc = "SDR (rw) register accessor: an alias for `Reg<SDR_SPEC>`"] pub type SDR = crate :: Reg < sdr :: SDR_SPEC > ; # [doc = "I2C Slave Data"] pub mod sdr ; # [doc = "SIMR (rw) register accessor: an alias for `Reg<SIMR_SPEC>`"] pub type SIMR = crate :: Reg < simr :: SIMR_SPEC > ; # [doc = "I2C Slave Interrupt Mask"] pub mod simr ; # [doc = "SRIS (rw) register accessor: an alias for `Reg<SRIS_SPEC>`"] pub type SRIS = crate :: Reg < sris :: SRIS_SPEC > ; # [doc = "I2C Slave Raw Interrupt Status"] pub mod sris ; # [doc = "SMIS (rw) register accessor: an alias for `Reg<SMIS_SPEC>`"] pub type SMIS = crate :: Reg < smis :: SMIS_SPEC > ; # [doc = "I2C Slave Masked Interrupt Status"] pub mod smis ; # [doc = "SICR (w) register accessor: an alias for `Reg<SICR_SPEC>`"] pub type SICR = crate :: Reg < sicr :: SICR_SPEC > ; # [doc = "I2C Slave Interrupt Clear"] pub mod sicr ; # [doc = "SOAR2 (rw) register accessor: an alias for `Reg<SOAR2_SPEC>`"] pub type SOAR2 = crate :: Reg < soar2 :: SOAR2_SPEC > ; # [doc = "I2C Slave Own Address 2"] pub mod soar2 ; # [doc = "SACKCTL (rw) register accessor: an alias for `Reg<SACKCTL_SPEC>`"] pub type SACKCTL = crate :: Reg < sackctl :: SACKCTL_SPEC > ; # [doc = "I2C Slave ACK Control"] pub mod sackctl ; # [doc = "PP (rw) register accessor: an alias for `Reg<PP_SPEC>`"] pub type PP = crate :: Reg < pp :: PP_SPEC > ; # [doc = "I2C Peripheral Properties"] pub mod pp ; # [doc = "PC (rw) register accessor: an alias for `Reg<PC_SPEC>`"] pub type PC = crate :: Reg < pc :: PC_SPEC > ; # [doc = "I2C Peripheral Configuration"] pub mod pc ;