# [doc = "Register `CSRL0` writer"] pub struct W (crate :: W < CSRL0_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CSRL0_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < CSRL0_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < CSRL0_SPEC >) -> Self { W (writer) } } # [doc = "Field `USB_CSRL0_RXRDY` writer - Receive Packet Ready"] pub type USB_CSRL0_RXRDY_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , CSRL0_SPEC , bool , O > ; # [doc = "Field `USB_CSRL0_TXRDY` writer - Transmit Packet Ready"] pub type USB_CSRL0_TXRDY_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , CSRL0_SPEC , bool , O > ; # [doc = "Field `USB_CSRL0_STALLED` writer - Endpoint Stalled"] pub type USB_CSRL0_STALLED_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , CSRL0_SPEC , bool , O > ; # [doc = "Field `USB_CSRL0_DATAEND` writer - Data End"] pub type USB_CSRL0_DATAEND_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , CSRL0_SPEC , bool , O > ; # [doc = "Field `USB_CSRL0_SETEND` writer - Setup End"] pub type USB_CSRL0_SETEND_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , CSRL0_SPEC , bool , O > ; # [doc = "Field `USB_CSRL0_STALL` writer - Send Stall"] pub type USB_CSRL0_STALL_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , CSRL0_SPEC , bool , O > ; # [doc = "Field `USB_CSRL0_RXRDYC` writer - RXRDY Clear"] pub type USB_CSRL0_RXRDYC_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , CSRL0_SPEC , bool , O > ; # [doc = "Field `USB_CSRL0_SETENDC` writer - Setup End Clear"] pub type USB_CSRL0_SETENDC_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , CSRL0_SPEC , bool , O > ; impl W { # [doc = "Bit 0 - Receive Packet Ready"] # [inline (always)] # [must_use] pub fn usb_csrl0_rxrdy (& mut self) -> USB_CSRL0_RXRDY_W < 0 > { USB_CSRL0_RXRDY_W :: new (self) } # [doc = "Bit 1 - Transmit Packet Ready"] # [inline (always)] # [must_use] pub fn usb_csrl0_txrdy (& mut self) -> USB_CSRL0_TXRDY_W < 1 > { USB_CSRL0_TXRDY_W :: new (self) } # [doc = "Bit 2 - Endpoint Stalled"] # [inline (always)] # [must_use] pub fn usb_csrl0_stalled (& mut self) -> USB_CSRL0_STALLED_W < 2 > { USB_CSRL0_STALLED_W :: new (self) } # [doc = "Bit 3 - Data End"] # [inline (always)] # [must_use] pub fn usb_csrl0_dataend (& mut self) -> USB_CSRL0_DATAEND_W < 3 > { USB_CSRL0_DATAEND_W :: new (self) } # [doc = "Bit 4 - Setup End"] # [inline (always)] # [must_use] pub fn usb_csrl0_setend (& mut self) -> USB_CSRL0_SETEND_W < 4 > { USB_CSRL0_SETEND_W :: new (self) } # [doc = "Bit 5 - Send Stall"] # [inline (always)] # [must_use] pub fn usb_csrl0_stall (& mut self) -> USB_CSRL0_STALL_W < 5 > { USB_CSRL0_STALL_W :: new (self) } # [doc = "Bit 6 - RXRDY Clear"] # [inline (always)] # [must_use] pub fn usb_csrl0_rxrdyc (& mut self) -> USB_CSRL0_RXRDYC_W < 6 > { USB_CSRL0_RXRDYC_W :: new (self) } # [doc = "Bit 7 - Setup End Clear"] # [inline (always)] # [must_use] pub fn usb_csrl0_setendc (& mut self) -> USB_CSRL0_SETENDC_W < 7 > { USB_CSRL0_SETENDC_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u8) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "USB Control and Status Endpoint 0 Low\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csrl0](index.html) module"] pub struct CSRL0_SPEC ; impl crate :: RegisterSpec for CSRL0_SPEC { type Ux = u8 ; } # [doc = "`write(|w| ..)` method takes [csrl0::W](W) writer structure"] impl crate :: Writable for CSRL0_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CSRL0 to value 0"] impl crate :: Resettable for CSRL0_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }