# [doc = "Register `TEST` reader"] pub struct R (crate :: R < TEST_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < TEST_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < TEST_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < TEST_SPEC >) -> Self { R (reader) } } # [doc = "Register `TEST` writer"] pub struct W (crate :: W < TEST_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < TEST_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < TEST_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < TEST_SPEC >) -> Self { W (writer) } } # [doc = "Field `USB_TEST_FORCEFS` reader - Force Full-Speed Mode"] pub type USB_TEST_FORCEFS_R = crate :: BitReader < bool > ; # [doc = "Field `USB_TEST_FORCEFS` writer - Force Full-Speed Mode"] pub type USB_TEST_FORCEFS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , TEST_SPEC , bool , O > ; # [doc = "Field `USB_TEST_FIFOACC` reader - FIFO Access"] pub type USB_TEST_FIFOACC_R = crate :: BitReader < bool > ; # [doc = "Field `USB_TEST_FIFOACC` writer - FIFO Access"] pub type USB_TEST_FIFOACC_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , TEST_SPEC , bool , O > ; # [doc = "Field `USB_TEST_FORCEH` reader - Force Host Mode"] pub type USB_TEST_FORCEH_R = crate :: BitReader < bool > ; # [doc = "Field `USB_TEST_FORCEH` writer - Force Host Mode"] pub type USB_TEST_FORCEH_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u8 , TEST_SPEC , bool , O > ; impl R { # [doc = "Bit 5 - Force Full-Speed Mode"] # [inline (always)] pub fn usb_test_forcefs (& self) -> USB_TEST_FORCEFS_R { USB_TEST_FORCEFS_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - FIFO Access"] # [inline (always)] pub fn usb_test_fifoacc (& self) -> USB_TEST_FIFOACC_R { USB_TEST_FIFOACC_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Force Host Mode"] # [inline (always)] pub fn usb_test_forceh (& self) -> USB_TEST_FORCEH_R { USB_TEST_FORCEH_R :: new (((self . bits >> 7) & 1) != 0) } } impl W { # [doc = "Bit 5 - Force Full-Speed Mode"] # [inline (always)] # [must_use] pub fn usb_test_forcefs (& mut self) -> USB_TEST_FORCEFS_W < 5 > { USB_TEST_FORCEFS_W :: new (self) } # [doc = "Bit 6 - FIFO Access"] # [inline (always)] # [must_use] pub fn usb_test_fifoacc (& mut self) -> USB_TEST_FIFOACC_W < 6 > { USB_TEST_FIFOACC_W :: new (self) } # [doc = "Bit 7 - Force Host Mode"] # [inline (always)] # [must_use] pub fn usb_test_forceh (& mut self) -> USB_TEST_FORCEH_W < 7 > { USB_TEST_FORCEH_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u8) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "USB Test Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [test](index.html) module"] pub struct TEST_SPEC ; impl crate :: RegisterSpec for TEST_SPEC { type Ux = u8 ; } # [doc = "`read()` method returns [test::R](R) reader structure"] impl crate :: Readable for TEST_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [test::W](W) writer structure"] impl crate :: Writable for TEST_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets TEST to value 0"] impl crate :: Resettable for TEST_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }