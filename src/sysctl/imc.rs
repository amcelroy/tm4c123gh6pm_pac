# [doc = "Register `IMC` reader"] pub struct R (crate :: R < IMC_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < IMC_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < IMC_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < IMC_SPEC >) -> Self { R (reader) } } # [doc = "Register `IMC` writer"] pub struct W (crate :: W < IMC_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < IMC_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < IMC_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < IMC_SPEC >) -> Self { W (writer) } } # [doc = "Field `SYSCTL_IMC_BOR1IM` reader - VDD under BOR1 Interrupt Mask"] pub type SYSCTL_IMC_BOR1IM_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_IMC_BOR1IM` writer - VDD under BOR1 Interrupt Mask"] pub type SYSCTL_IMC_BOR1IM_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , IMC_SPEC , bool , O > ; # [doc = "Field `SYSCTL_IMC_MOFIM` reader - Main Oscillator Failure Interrupt Mask"] pub type SYSCTL_IMC_MOFIM_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_IMC_MOFIM` writer - Main Oscillator Failure Interrupt Mask"] pub type SYSCTL_IMC_MOFIM_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , IMC_SPEC , bool , O > ; # [doc = "Field `SYSCTL_IMC_PLLLIM` reader - PLL Lock Interrupt Mask"] pub type SYSCTL_IMC_PLLLIM_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_IMC_PLLLIM` writer - PLL Lock Interrupt Mask"] pub type SYSCTL_IMC_PLLLIM_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , IMC_SPEC , bool , O > ; # [doc = "Field `SYSCTL_IMC_USBPLLLIM` reader - USB PLL Lock Interrupt Mask"] pub type SYSCTL_IMC_USBPLLLIM_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_IMC_USBPLLLIM` writer - USB PLL Lock Interrupt Mask"] pub type SYSCTL_IMC_USBPLLLIM_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , IMC_SPEC , bool , O > ; # [doc = "Field `SYSCTL_IMC_MOSCPUPIM` reader - MOSC Power Up Interrupt Mask"] pub type SYSCTL_IMC_MOSCPUPIM_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_IMC_MOSCPUPIM` writer - MOSC Power Up Interrupt Mask"] pub type SYSCTL_IMC_MOSCPUPIM_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , IMC_SPEC , bool , O > ; # [doc = "Field `SYSCTL_IMC_VDDAIM` reader - VDDA Power OK Interrupt Mask"] pub type SYSCTL_IMC_VDDAIM_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_IMC_VDDAIM` writer - VDDA Power OK Interrupt Mask"] pub type SYSCTL_IMC_VDDAIM_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , IMC_SPEC , bool , O > ; # [doc = "Field `SYSCTL_IMC_BOR0IM` reader - VDD under BOR0 Interrupt Mask"] pub type SYSCTL_IMC_BOR0IM_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_IMC_BOR0IM` writer - VDD under BOR0 Interrupt Mask"] pub type SYSCTL_IMC_BOR0IM_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , IMC_SPEC , bool , O > ; impl R { # [doc = "Bit 1 - VDD under BOR1 Interrupt Mask"] # [inline (always)] pub fn sysctl_imc_bor1im (& self) -> SYSCTL_IMC_BOR1IM_R { SYSCTL_IMC_BOR1IM_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 3 - Main Oscillator Failure Interrupt Mask"] # [inline (always)] pub fn sysctl_imc_mofim (& self) -> SYSCTL_IMC_MOFIM_R { SYSCTL_IMC_MOFIM_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 6 - PLL Lock Interrupt Mask"] # [inline (always)] pub fn sysctl_imc_plllim (& self) -> SYSCTL_IMC_PLLLIM_R { SYSCTL_IMC_PLLLIM_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - USB PLL Lock Interrupt Mask"] # [inline (always)] pub fn sysctl_imc_usbplllim (& self) -> SYSCTL_IMC_USBPLLLIM_R { SYSCTL_IMC_USBPLLLIM_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - MOSC Power Up Interrupt Mask"] # [inline (always)] pub fn sysctl_imc_moscpupim (& self) -> SYSCTL_IMC_MOSCPUPIM_R { SYSCTL_IMC_MOSCPUPIM_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 10 - VDDA Power OK Interrupt Mask"] # [inline (always)] pub fn sysctl_imc_vddaim (& self) -> SYSCTL_IMC_VDDAIM_R { SYSCTL_IMC_VDDAIM_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - VDD under BOR0 Interrupt Mask"] # [inline (always)] pub fn sysctl_imc_bor0im (& self) -> SYSCTL_IMC_BOR0IM_R { SYSCTL_IMC_BOR0IM_R :: new (((self . bits >> 11) & 1) != 0) } } impl W { # [doc = "Bit 1 - VDD under BOR1 Interrupt Mask"] # [inline (always)] # [must_use] pub fn sysctl_imc_bor1im (& mut self) -> SYSCTL_IMC_BOR1IM_W < 1 > { SYSCTL_IMC_BOR1IM_W :: new (self) } # [doc = "Bit 3 - Main Oscillator Failure Interrupt Mask"] # [inline (always)] # [must_use] pub fn sysctl_imc_mofim (& mut self) -> SYSCTL_IMC_MOFIM_W < 3 > { SYSCTL_IMC_MOFIM_W :: new (self) } # [doc = "Bit 6 - PLL Lock Interrupt Mask"] # [inline (always)] # [must_use] pub fn sysctl_imc_plllim (& mut self) -> SYSCTL_IMC_PLLLIM_W < 6 > { SYSCTL_IMC_PLLLIM_W :: new (self) } # [doc = "Bit 7 - USB PLL Lock Interrupt Mask"] # [inline (always)] # [must_use] pub fn sysctl_imc_usbplllim (& mut self) -> SYSCTL_IMC_USBPLLLIM_W < 7 > { SYSCTL_IMC_USBPLLLIM_W :: new (self) } # [doc = "Bit 8 - MOSC Power Up Interrupt Mask"] # [inline (always)] # [must_use] pub fn sysctl_imc_moscpupim (& mut self) -> SYSCTL_IMC_MOSCPUPIM_W < 8 > { SYSCTL_IMC_MOSCPUPIM_W :: new (self) } # [doc = "Bit 10 - VDDA Power OK Interrupt Mask"] # [inline (always)] # [must_use] pub fn sysctl_imc_vddaim (& mut self) -> SYSCTL_IMC_VDDAIM_W < 10 > { SYSCTL_IMC_VDDAIM_W :: new (self) } # [doc = "Bit 11 - VDD under BOR0 Interrupt Mask"] # [inline (always)] # [must_use] pub fn sysctl_imc_bor0im (& mut self) -> SYSCTL_IMC_BOR0IM_W < 11 > { SYSCTL_IMC_BOR0IM_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Interrupt Mask Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imc](index.html) module"] pub struct IMC_SPEC ; impl crate :: RegisterSpec for IMC_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [imc::R](R) reader structure"] impl crate :: Readable for IMC_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [imc::W](W) writer structure"] impl crate :: Writable for IMC_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets IMC to value 0"] impl crate :: Resettable for IMC_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }