# [doc = "Register `DC9` reader"] pub struct R (crate :: R < DC9_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < DC9_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < DC9_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < DC9_SPEC >) -> Self { R (reader) } } # [doc = "Register `DC9` writer"] pub struct W (crate :: W < DC9_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < DC9_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < DC9_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < DC9_SPEC >) -> Self { W (writer) } } # [doc = "Field `SYSCTL_DC9_ADC0DC0` reader - ADC0 DC0 Present"] pub type SYSCTL_DC9_ADC0DC0_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC0DC0` writer - ADC0 DC0 Present"] pub type SYSCTL_DC9_ADC0DC0_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC0DC1` reader - ADC0 DC1 Present"] pub type SYSCTL_DC9_ADC0DC1_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC0DC1` writer - ADC0 DC1 Present"] pub type SYSCTL_DC9_ADC0DC1_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC0DC2` reader - ADC0 DC2 Present"] pub type SYSCTL_DC9_ADC0DC2_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC0DC2` writer - ADC0 DC2 Present"] pub type SYSCTL_DC9_ADC0DC2_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC0DC3` reader - ADC0 DC3 Present"] pub type SYSCTL_DC9_ADC0DC3_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC0DC3` writer - ADC0 DC3 Present"] pub type SYSCTL_DC9_ADC0DC3_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC0DC4` reader - ADC0 DC4 Present"] pub type SYSCTL_DC9_ADC0DC4_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC0DC4` writer - ADC0 DC4 Present"] pub type SYSCTL_DC9_ADC0DC4_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC0DC5` reader - ADC0 DC5 Present"] pub type SYSCTL_DC9_ADC0DC5_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC0DC5` writer - ADC0 DC5 Present"] pub type SYSCTL_DC9_ADC0DC5_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC0DC6` reader - ADC0 DC6 Present"] pub type SYSCTL_DC9_ADC0DC6_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC0DC6` writer - ADC0 DC6 Present"] pub type SYSCTL_DC9_ADC0DC6_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC0DC7` reader - ADC0 DC7 Present"] pub type SYSCTL_DC9_ADC0DC7_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC0DC7` writer - ADC0 DC7 Present"] pub type SYSCTL_DC9_ADC0DC7_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC1DC0` reader - ADC1 DC0 Present"] pub type SYSCTL_DC9_ADC1DC0_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC1DC0` writer - ADC1 DC0 Present"] pub type SYSCTL_DC9_ADC1DC0_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC1DC1` reader - ADC1 DC1 Present"] pub type SYSCTL_DC9_ADC1DC1_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC1DC1` writer - ADC1 DC1 Present"] pub type SYSCTL_DC9_ADC1DC1_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC1DC2` reader - ADC1 DC2 Present"] pub type SYSCTL_DC9_ADC1DC2_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC1DC2` writer - ADC1 DC2 Present"] pub type SYSCTL_DC9_ADC1DC2_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC1DC3` reader - ADC1 DC3 Present"] pub type SYSCTL_DC9_ADC1DC3_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC1DC3` writer - ADC1 DC3 Present"] pub type SYSCTL_DC9_ADC1DC3_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC1DC4` reader - ADC1 DC4 Present"] pub type SYSCTL_DC9_ADC1DC4_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC1DC4` writer - ADC1 DC4 Present"] pub type SYSCTL_DC9_ADC1DC4_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC1DC5` reader - ADC1 DC5 Present"] pub type SYSCTL_DC9_ADC1DC5_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC1DC5` writer - ADC1 DC5 Present"] pub type SYSCTL_DC9_ADC1DC5_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC1DC6` reader - ADC1 DC6 Present"] pub type SYSCTL_DC9_ADC1DC6_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC1DC6` writer - ADC1 DC6 Present"] pub type SYSCTL_DC9_ADC1DC6_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC9_ADC1DC7` reader - ADC1 DC7 Present"] pub type SYSCTL_DC9_ADC1DC7_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC9_ADC1DC7` writer - ADC1 DC7 Present"] pub type SYSCTL_DC9_ADC1DC7_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC9_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - ADC0 DC0 Present"] # [inline (always)] pub fn sysctl_dc9_adc0dc0 (& self) -> SYSCTL_DC9_ADC0DC0_R { SYSCTL_DC9_ADC0DC0_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - ADC0 DC1 Present"] # [inline (always)] pub fn sysctl_dc9_adc0dc1 (& self) -> SYSCTL_DC9_ADC0DC1_R { SYSCTL_DC9_ADC0DC1_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - ADC0 DC2 Present"] # [inline (always)] pub fn sysctl_dc9_adc0dc2 (& self) -> SYSCTL_DC9_ADC0DC2_R { SYSCTL_DC9_ADC0DC2_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - ADC0 DC3 Present"] # [inline (always)] pub fn sysctl_dc9_adc0dc3 (& self) -> SYSCTL_DC9_ADC0DC3_R { SYSCTL_DC9_ADC0DC3_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - ADC0 DC4 Present"] # [inline (always)] pub fn sysctl_dc9_adc0dc4 (& self) -> SYSCTL_DC9_ADC0DC4_R { SYSCTL_DC9_ADC0DC4_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - ADC0 DC5 Present"] # [inline (always)] pub fn sysctl_dc9_adc0dc5 (& self) -> SYSCTL_DC9_ADC0DC5_R { SYSCTL_DC9_ADC0DC5_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - ADC0 DC6 Present"] # [inline (always)] pub fn sysctl_dc9_adc0dc6 (& self) -> SYSCTL_DC9_ADC0DC6_R { SYSCTL_DC9_ADC0DC6_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - ADC0 DC7 Present"] # [inline (always)] pub fn sysctl_dc9_adc0dc7 (& self) -> SYSCTL_DC9_ADC0DC7_R { SYSCTL_DC9_ADC0DC7_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 16 - ADC1 DC0 Present"] # [inline (always)] pub fn sysctl_dc9_adc1dc0 (& self) -> SYSCTL_DC9_ADC1DC0_R { SYSCTL_DC9_ADC1DC0_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - ADC1 DC1 Present"] # [inline (always)] pub fn sysctl_dc9_adc1dc1 (& self) -> SYSCTL_DC9_ADC1DC1_R { SYSCTL_DC9_ADC1DC1_R :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - ADC1 DC2 Present"] # [inline (always)] pub fn sysctl_dc9_adc1dc2 (& self) -> SYSCTL_DC9_ADC1DC2_R { SYSCTL_DC9_ADC1DC2_R :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - ADC1 DC3 Present"] # [inline (always)] pub fn sysctl_dc9_adc1dc3 (& self) -> SYSCTL_DC9_ADC1DC3_R { SYSCTL_DC9_ADC1DC3_R :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - ADC1 DC4 Present"] # [inline (always)] pub fn sysctl_dc9_adc1dc4 (& self) -> SYSCTL_DC9_ADC1DC4_R { SYSCTL_DC9_ADC1DC4_R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - ADC1 DC5 Present"] # [inline (always)] pub fn sysctl_dc9_adc1dc5 (& self) -> SYSCTL_DC9_ADC1DC5_R { SYSCTL_DC9_ADC1DC5_R :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - ADC1 DC6 Present"] # [inline (always)] pub fn sysctl_dc9_adc1dc6 (& self) -> SYSCTL_DC9_ADC1DC6_R { SYSCTL_DC9_ADC1DC6_R :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - ADC1 DC7 Present"] # [inline (always)] pub fn sysctl_dc9_adc1dc7 (& self) -> SYSCTL_DC9_ADC1DC7_R { SYSCTL_DC9_ADC1DC7_R :: new (((self . bits >> 23) & 1) != 0) } } impl W { # [doc = "Bit 0 - ADC0 DC0 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc0dc0 (& mut self) -> SYSCTL_DC9_ADC0DC0_W < 0 > { SYSCTL_DC9_ADC0DC0_W :: new (self) } # [doc = "Bit 1 - ADC0 DC1 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc0dc1 (& mut self) -> SYSCTL_DC9_ADC0DC1_W < 1 > { SYSCTL_DC9_ADC0DC1_W :: new (self) } # [doc = "Bit 2 - ADC0 DC2 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc0dc2 (& mut self) -> SYSCTL_DC9_ADC0DC2_W < 2 > { SYSCTL_DC9_ADC0DC2_W :: new (self) } # [doc = "Bit 3 - ADC0 DC3 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc0dc3 (& mut self) -> SYSCTL_DC9_ADC0DC3_W < 3 > { SYSCTL_DC9_ADC0DC3_W :: new (self) } # [doc = "Bit 4 - ADC0 DC4 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc0dc4 (& mut self) -> SYSCTL_DC9_ADC0DC4_W < 4 > { SYSCTL_DC9_ADC0DC4_W :: new (self) } # [doc = "Bit 5 - ADC0 DC5 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc0dc5 (& mut self) -> SYSCTL_DC9_ADC0DC5_W < 5 > { SYSCTL_DC9_ADC0DC5_W :: new (self) } # [doc = "Bit 6 - ADC0 DC6 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc0dc6 (& mut self) -> SYSCTL_DC9_ADC0DC6_W < 6 > { SYSCTL_DC9_ADC0DC6_W :: new (self) } # [doc = "Bit 7 - ADC0 DC7 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc0dc7 (& mut self) -> SYSCTL_DC9_ADC0DC7_W < 7 > { SYSCTL_DC9_ADC0DC7_W :: new (self) } # [doc = "Bit 16 - ADC1 DC0 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc1dc0 (& mut self) -> SYSCTL_DC9_ADC1DC0_W < 16 > { SYSCTL_DC9_ADC1DC0_W :: new (self) } # [doc = "Bit 17 - ADC1 DC1 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc1dc1 (& mut self) -> SYSCTL_DC9_ADC1DC1_W < 17 > { SYSCTL_DC9_ADC1DC1_W :: new (self) } # [doc = "Bit 18 - ADC1 DC2 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc1dc2 (& mut self) -> SYSCTL_DC9_ADC1DC2_W < 18 > { SYSCTL_DC9_ADC1DC2_W :: new (self) } # [doc = "Bit 19 - ADC1 DC3 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc1dc3 (& mut self) -> SYSCTL_DC9_ADC1DC3_W < 19 > { SYSCTL_DC9_ADC1DC3_W :: new (self) } # [doc = "Bit 20 - ADC1 DC4 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc1dc4 (& mut self) -> SYSCTL_DC9_ADC1DC4_W < 20 > { SYSCTL_DC9_ADC1DC4_W :: new (self) } # [doc = "Bit 21 - ADC1 DC5 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc1dc5 (& mut self) -> SYSCTL_DC9_ADC1DC5_W < 21 > { SYSCTL_DC9_ADC1DC5_W :: new (self) } # [doc = "Bit 22 - ADC1 DC6 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc1dc6 (& mut self) -> SYSCTL_DC9_ADC1DC6_W < 22 > { SYSCTL_DC9_ADC1DC6_W :: new (self) } # [doc = "Bit 23 - ADC1 DC7 Present"] # [inline (always)] # [must_use] pub fn sysctl_dc9_adc1dc7 (& mut self) -> SYSCTL_DC9_ADC1DC7_W < 23 > { SYSCTL_DC9_ADC1DC7_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Device Capabilities 9\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dc9](index.html) module"] pub struct DC9_SPEC ; impl crate :: RegisterSpec for DC9_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [dc9::R](R) reader structure"] impl crate :: Readable for DC9_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [dc9::W](W) writer structure"] impl crate :: Writable for DC9_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets DC9 to value 0"] impl crate :: Resettable for DC9_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }