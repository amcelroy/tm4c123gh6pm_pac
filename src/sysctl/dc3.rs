# [doc = "Register `DC3` reader"] pub struct R (crate :: R < DC3_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < DC3_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < DC3_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < DC3_SPEC >) -> Self { R (reader) } } # [doc = "Register `DC3` writer"] pub struct W (crate :: W < DC3_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < DC3_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < DC3_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < DC3_SPEC >) -> Self { W (writer) } } # [doc = "Field `SYSCTL_DC3_PWM0` reader - PWM0 Pin Present"] pub type SYSCTL_DC3_PWM0_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_PWM0` writer - PWM0 Pin Present"] pub type SYSCTL_DC3_PWM0_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_PWM1` reader - PWM1 Pin Present"] pub type SYSCTL_DC3_PWM1_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_PWM1` writer - PWM1 Pin Present"] pub type SYSCTL_DC3_PWM1_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_PWM2` reader - PWM2 Pin Present"] pub type SYSCTL_DC3_PWM2_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_PWM2` writer - PWM2 Pin Present"] pub type SYSCTL_DC3_PWM2_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_PWM3` reader - PWM3 Pin Present"] pub type SYSCTL_DC3_PWM3_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_PWM3` writer - PWM3 Pin Present"] pub type SYSCTL_DC3_PWM3_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_PWM4` reader - PWM4 Pin Present"] pub type SYSCTL_DC3_PWM4_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_PWM4` writer - PWM4 Pin Present"] pub type SYSCTL_DC3_PWM4_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_PWM5` reader - PWM5 Pin Present"] pub type SYSCTL_DC3_PWM5_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_PWM5` writer - PWM5 Pin Present"] pub type SYSCTL_DC3_PWM5_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_C0MINUS` reader - C0- Pin Present"] pub type SYSCTL_DC3_C0MINUS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_C0MINUS` writer - C0- Pin Present"] pub type SYSCTL_DC3_C0MINUS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_C0PLUS` reader - C0+ Pin Present"] pub type SYSCTL_DC3_C0PLUS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_C0PLUS` writer - C0+ Pin Present"] pub type SYSCTL_DC3_C0PLUS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_C0O` reader - C0o Pin Present"] pub type SYSCTL_DC3_C0O_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_C0O` writer - C0o Pin Present"] pub type SYSCTL_DC3_C0O_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_C1MINUS` reader - C1- Pin Present"] pub type SYSCTL_DC3_C1MINUS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_C1MINUS` writer - C1- Pin Present"] pub type SYSCTL_DC3_C1MINUS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_C1PLUS` reader - C1+ Pin Present"] pub type SYSCTL_DC3_C1PLUS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_C1PLUS` writer - C1+ Pin Present"] pub type SYSCTL_DC3_C1PLUS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_C1O` reader - C1o Pin Present"] pub type SYSCTL_DC3_C1O_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_C1O` writer - C1o Pin Present"] pub type SYSCTL_DC3_C1O_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_C2MINUS` reader - C2- Pin Present"] pub type SYSCTL_DC3_C2MINUS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_C2MINUS` writer - C2- Pin Present"] pub type SYSCTL_DC3_C2MINUS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_C2PLUS` reader - C2+ Pin Present"] pub type SYSCTL_DC3_C2PLUS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_C2PLUS` writer - C2+ Pin Present"] pub type SYSCTL_DC3_C2PLUS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_C2O` reader - C2o Pin Present"] pub type SYSCTL_DC3_C2O_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_C2O` writer - C2o Pin Present"] pub type SYSCTL_DC3_C2O_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_PWMFAULT` reader - PWM Fault Pin Present"] pub type SYSCTL_DC3_PWMFAULT_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_PWMFAULT` writer - PWM Fault Pin Present"] pub type SYSCTL_DC3_PWMFAULT_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN0` reader - ADC Module 0 AIN0 Pin Present"] pub type SYSCTL_DC3_ADC0AIN0_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN0` writer - ADC Module 0 AIN0 Pin Present"] pub type SYSCTL_DC3_ADC0AIN0_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN1` reader - ADC Module 0 AIN1 Pin Present"] pub type SYSCTL_DC3_ADC0AIN1_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN1` writer - ADC Module 0 AIN1 Pin Present"] pub type SYSCTL_DC3_ADC0AIN1_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN2` reader - ADC Module 0 AIN2 Pin Present"] pub type SYSCTL_DC3_ADC0AIN2_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN2` writer - ADC Module 0 AIN2 Pin Present"] pub type SYSCTL_DC3_ADC0AIN2_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN3` reader - ADC Module 0 AIN3 Pin Present"] pub type SYSCTL_DC3_ADC0AIN3_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN3` writer - ADC Module 0 AIN3 Pin Present"] pub type SYSCTL_DC3_ADC0AIN3_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN4` reader - ADC Module 0 AIN4 Pin Present"] pub type SYSCTL_DC3_ADC0AIN4_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN4` writer - ADC Module 0 AIN4 Pin Present"] pub type SYSCTL_DC3_ADC0AIN4_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN5` reader - ADC Module 0 AIN5 Pin Present"] pub type SYSCTL_DC3_ADC0AIN5_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN5` writer - ADC Module 0 AIN5 Pin Present"] pub type SYSCTL_DC3_ADC0AIN5_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN6` reader - ADC Module 0 AIN6 Pin Present"] pub type SYSCTL_DC3_ADC0AIN6_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN6` writer - ADC Module 0 AIN6 Pin Present"] pub type SYSCTL_DC3_ADC0AIN6_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN7` reader - ADC Module 0 AIN7 Pin Present"] pub type SYSCTL_DC3_ADC0AIN7_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_ADC0AIN7` writer - ADC Module 0 AIN7 Pin Present"] pub type SYSCTL_DC3_ADC0AIN7_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_CCP0` reader - T0CCP0 Pin Present"] pub type SYSCTL_DC3_CCP0_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_CCP0` writer - T0CCP0 Pin Present"] pub type SYSCTL_DC3_CCP0_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_CCP1` reader - T0CCP1 Pin Present"] pub type SYSCTL_DC3_CCP1_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_CCP1` writer - T0CCP1 Pin Present"] pub type SYSCTL_DC3_CCP1_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_CCP2` reader - T1CCP0 Pin Present"] pub type SYSCTL_DC3_CCP2_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_CCP2` writer - T1CCP0 Pin Present"] pub type SYSCTL_DC3_CCP2_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_CCP3` reader - T1CCP1 Pin Present"] pub type SYSCTL_DC3_CCP3_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_CCP3` writer - T1CCP1 Pin Present"] pub type SYSCTL_DC3_CCP3_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_CCP4` reader - T2CCP0 Pin Present"] pub type SYSCTL_DC3_CCP4_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_CCP4` writer - T2CCP0 Pin Present"] pub type SYSCTL_DC3_CCP4_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_CCP5` reader - T2CCP1 Pin Present"] pub type SYSCTL_DC3_CCP5_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_CCP5` writer - T2CCP1 Pin Present"] pub type SYSCTL_DC3_CCP5_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; # [doc = "Field `SYSCTL_DC3_32KHZ` reader - 32KHz Input Clock Available"] pub type SYSCTL_DC3_32KHZ_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_DC3_32KHZ` writer - 32KHz Input Clock Available"] pub type SYSCTL_DC3_32KHZ_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , DC3_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - PWM0 Pin Present"] # [inline (always)] pub fn sysctl_dc3_pwm0 (& self) -> SYSCTL_DC3_PWM0_R { SYSCTL_DC3_PWM0_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - PWM1 Pin Present"] # [inline (always)] pub fn sysctl_dc3_pwm1 (& self) -> SYSCTL_DC3_PWM1_R { SYSCTL_DC3_PWM1_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - PWM2 Pin Present"] # [inline (always)] pub fn sysctl_dc3_pwm2 (& self) -> SYSCTL_DC3_PWM2_R { SYSCTL_DC3_PWM2_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - PWM3 Pin Present"] # [inline (always)] pub fn sysctl_dc3_pwm3 (& self) -> SYSCTL_DC3_PWM3_R { SYSCTL_DC3_PWM3_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - PWM4 Pin Present"] # [inline (always)] pub fn sysctl_dc3_pwm4 (& self) -> SYSCTL_DC3_PWM4_R { SYSCTL_DC3_PWM4_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - PWM5 Pin Present"] # [inline (always)] pub fn sysctl_dc3_pwm5 (& self) -> SYSCTL_DC3_PWM5_R { SYSCTL_DC3_PWM5_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - C0- Pin Present"] # [inline (always)] pub fn sysctl_dc3_c0minus (& self) -> SYSCTL_DC3_C0MINUS_R { SYSCTL_DC3_C0MINUS_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - C0+ Pin Present"] # [inline (always)] pub fn sysctl_dc3_c0plus (& self) -> SYSCTL_DC3_C0PLUS_R { SYSCTL_DC3_C0PLUS_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - C0o Pin Present"] # [inline (always)] pub fn sysctl_dc3_c0o (& self) -> SYSCTL_DC3_C0O_R { SYSCTL_DC3_C0O_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - C1- Pin Present"] # [inline (always)] pub fn sysctl_dc3_c1minus (& self) -> SYSCTL_DC3_C1MINUS_R { SYSCTL_DC3_C1MINUS_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - C1+ Pin Present"] # [inline (always)] pub fn sysctl_dc3_c1plus (& self) -> SYSCTL_DC3_C1PLUS_R { SYSCTL_DC3_C1PLUS_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - C1o Pin Present"] # [inline (always)] pub fn sysctl_dc3_c1o (& self) -> SYSCTL_DC3_C1O_R { SYSCTL_DC3_C1O_R :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - C2- Pin Present"] # [inline (always)] pub fn sysctl_dc3_c2minus (& self) -> SYSCTL_DC3_C2MINUS_R { SYSCTL_DC3_C2MINUS_R :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - C2+ Pin Present"] # [inline (always)] pub fn sysctl_dc3_c2plus (& self) -> SYSCTL_DC3_C2PLUS_R { SYSCTL_DC3_C2PLUS_R :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - C2o Pin Present"] # [inline (always)] pub fn sysctl_dc3_c2o (& self) -> SYSCTL_DC3_C2O_R { SYSCTL_DC3_C2O_R :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - PWM Fault Pin Present"] # [inline (always)] pub fn sysctl_dc3_pwmfault (& self) -> SYSCTL_DC3_PWMFAULT_R { SYSCTL_DC3_PWMFAULT_R :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - ADC Module 0 AIN0 Pin Present"] # [inline (always)] pub fn sysctl_dc3_adc0ain0 (& self) -> SYSCTL_DC3_ADC0AIN0_R { SYSCTL_DC3_ADC0AIN0_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - ADC Module 0 AIN1 Pin Present"] # [inline (always)] pub fn sysctl_dc3_adc0ain1 (& self) -> SYSCTL_DC3_ADC0AIN1_R { SYSCTL_DC3_ADC0AIN1_R :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - ADC Module 0 AIN2 Pin Present"] # [inline (always)] pub fn sysctl_dc3_adc0ain2 (& self) -> SYSCTL_DC3_ADC0AIN2_R { SYSCTL_DC3_ADC0AIN2_R :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - ADC Module 0 AIN3 Pin Present"] # [inline (always)] pub fn sysctl_dc3_adc0ain3 (& self) -> SYSCTL_DC3_ADC0AIN3_R { SYSCTL_DC3_ADC0AIN3_R :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - ADC Module 0 AIN4 Pin Present"] # [inline (always)] pub fn sysctl_dc3_adc0ain4 (& self) -> SYSCTL_DC3_ADC0AIN4_R { SYSCTL_DC3_ADC0AIN4_R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - ADC Module 0 AIN5 Pin Present"] # [inline (always)] pub fn sysctl_dc3_adc0ain5 (& self) -> SYSCTL_DC3_ADC0AIN5_R { SYSCTL_DC3_ADC0AIN5_R :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - ADC Module 0 AIN6 Pin Present"] # [inline (always)] pub fn sysctl_dc3_adc0ain6 (& self) -> SYSCTL_DC3_ADC0AIN6_R { SYSCTL_DC3_ADC0AIN6_R :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - ADC Module 0 AIN7 Pin Present"] # [inline (always)] pub fn sysctl_dc3_adc0ain7 (& self) -> SYSCTL_DC3_ADC0AIN7_R { SYSCTL_DC3_ADC0AIN7_R :: new (((self . bits >> 23) & 1) != 0) } # [doc = "Bit 24 - T0CCP0 Pin Present"] # [inline (always)] pub fn sysctl_dc3_ccp0 (& self) -> SYSCTL_DC3_CCP0_R { SYSCTL_DC3_CCP0_R :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - T0CCP1 Pin Present"] # [inline (always)] pub fn sysctl_dc3_ccp1 (& self) -> SYSCTL_DC3_CCP1_R { SYSCTL_DC3_CCP1_R :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - T1CCP0 Pin Present"] # [inline (always)] pub fn sysctl_dc3_ccp2 (& self) -> SYSCTL_DC3_CCP2_R { SYSCTL_DC3_CCP2_R :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 27 - T1CCP1 Pin Present"] # [inline (always)] pub fn sysctl_dc3_ccp3 (& self) -> SYSCTL_DC3_CCP3_R { SYSCTL_DC3_CCP3_R :: new (((self . bits >> 27) & 1) != 0) } # [doc = "Bit 28 - T2CCP0 Pin Present"] # [inline (always)] pub fn sysctl_dc3_ccp4 (& self) -> SYSCTL_DC3_CCP4_R { SYSCTL_DC3_CCP4_R :: new (((self . bits >> 28) & 1) != 0) } # [doc = "Bit 29 - T2CCP1 Pin Present"] # [inline (always)] pub fn sysctl_dc3_ccp5 (& self) -> SYSCTL_DC3_CCP5_R { SYSCTL_DC3_CCP5_R :: new (((self . bits >> 29) & 1) != 0) } # [doc = "Bit 31 - 32KHz Input Clock Available"] # [inline (always)] pub fn sysctl_dc3_32khz (& self) -> SYSCTL_DC3_32KHZ_R { SYSCTL_DC3_32KHZ_R :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bit 0 - PWM0 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_pwm0 (& mut self) -> SYSCTL_DC3_PWM0_W < 0 > { SYSCTL_DC3_PWM0_W :: new (self) } # [doc = "Bit 1 - PWM1 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_pwm1 (& mut self) -> SYSCTL_DC3_PWM1_W < 1 > { SYSCTL_DC3_PWM1_W :: new (self) } # [doc = "Bit 2 - PWM2 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_pwm2 (& mut self) -> SYSCTL_DC3_PWM2_W < 2 > { SYSCTL_DC3_PWM2_W :: new (self) } # [doc = "Bit 3 - PWM3 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_pwm3 (& mut self) -> SYSCTL_DC3_PWM3_W < 3 > { SYSCTL_DC3_PWM3_W :: new (self) } # [doc = "Bit 4 - PWM4 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_pwm4 (& mut self) -> SYSCTL_DC3_PWM4_W < 4 > { SYSCTL_DC3_PWM4_W :: new (self) } # [doc = "Bit 5 - PWM5 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_pwm5 (& mut self) -> SYSCTL_DC3_PWM5_W < 5 > { SYSCTL_DC3_PWM5_W :: new (self) } # [doc = "Bit 6 - C0- Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_c0minus (& mut self) -> SYSCTL_DC3_C0MINUS_W < 6 > { SYSCTL_DC3_C0MINUS_W :: new (self) } # [doc = "Bit 7 - C0+ Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_c0plus (& mut self) -> SYSCTL_DC3_C0PLUS_W < 7 > { SYSCTL_DC3_C0PLUS_W :: new (self) } # [doc = "Bit 8 - C0o Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_c0o (& mut self) -> SYSCTL_DC3_C0O_W < 8 > { SYSCTL_DC3_C0O_W :: new (self) } # [doc = "Bit 9 - C1- Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_c1minus (& mut self) -> SYSCTL_DC3_C1MINUS_W < 9 > { SYSCTL_DC3_C1MINUS_W :: new (self) } # [doc = "Bit 10 - C1+ Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_c1plus (& mut self) -> SYSCTL_DC3_C1PLUS_W < 10 > { SYSCTL_DC3_C1PLUS_W :: new (self) } # [doc = "Bit 11 - C1o Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_c1o (& mut self) -> SYSCTL_DC3_C1O_W < 11 > { SYSCTL_DC3_C1O_W :: new (self) } # [doc = "Bit 12 - C2- Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_c2minus (& mut self) -> SYSCTL_DC3_C2MINUS_W < 12 > { SYSCTL_DC3_C2MINUS_W :: new (self) } # [doc = "Bit 13 - C2+ Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_c2plus (& mut self) -> SYSCTL_DC3_C2PLUS_W < 13 > { SYSCTL_DC3_C2PLUS_W :: new (self) } # [doc = "Bit 14 - C2o Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_c2o (& mut self) -> SYSCTL_DC3_C2O_W < 14 > { SYSCTL_DC3_C2O_W :: new (self) } # [doc = "Bit 15 - PWM Fault Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_pwmfault (& mut self) -> SYSCTL_DC3_PWMFAULT_W < 15 > { SYSCTL_DC3_PWMFAULT_W :: new (self) } # [doc = "Bit 16 - ADC Module 0 AIN0 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_adc0ain0 (& mut self) -> SYSCTL_DC3_ADC0AIN0_W < 16 > { SYSCTL_DC3_ADC0AIN0_W :: new (self) } # [doc = "Bit 17 - ADC Module 0 AIN1 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_adc0ain1 (& mut self) -> SYSCTL_DC3_ADC0AIN1_W < 17 > { SYSCTL_DC3_ADC0AIN1_W :: new (self) } # [doc = "Bit 18 - ADC Module 0 AIN2 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_adc0ain2 (& mut self) -> SYSCTL_DC3_ADC0AIN2_W < 18 > { SYSCTL_DC3_ADC0AIN2_W :: new (self) } # [doc = "Bit 19 - ADC Module 0 AIN3 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_adc0ain3 (& mut self) -> SYSCTL_DC3_ADC0AIN3_W < 19 > { SYSCTL_DC3_ADC0AIN3_W :: new (self) } # [doc = "Bit 20 - ADC Module 0 AIN4 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_adc0ain4 (& mut self) -> SYSCTL_DC3_ADC0AIN4_W < 20 > { SYSCTL_DC3_ADC0AIN4_W :: new (self) } # [doc = "Bit 21 - ADC Module 0 AIN5 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_adc0ain5 (& mut self) -> SYSCTL_DC3_ADC0AIN5_W < 21 > { SYSCTL_DC3_ADC0AIN5_W :: new (self) } # [doc = "Bit 22 - ADC Module 0 AIN6 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_adc0ain6 (& mut self) -> SYSCTL_DC3_ADC0AIN6_W < 22 > { SYSCTL_DC3_ADC0AIN6_W :: new (self) } # [doc = "Bit 23 - ADC Module 0 AIN7 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_adc0ain7 (& mut self) -> SYSCTL_DC3_ADC0AIN7_W < 23 > { SYSCTL_DC3_ADC0AIN7_W :: new (self) } # [doc = "Bit 24 - T0CCP0 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_ccp0 (& mut self) -> SYSCTL_DC3_CCP0_W < 24 > { SYSCTL_DC3_CCP0_W :: new (self) } # [doc = "Bit 25 - T0CCP1 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_ccp1 (& mut self) -> SYSCTL_DC3_CCP1_W < 25 > { SYSCTL_DC3_CCP1_W :: new (self) } # [doc = "Bit 26 - T1CCP0 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_ccp2 (& mut self) -> SYSCTL_DC3_CCP2_W < 26 > { SYSCTL_DC3_CCP2_W :: new (self) } # [doc = "Bit 27 - T1CCP1 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_ccp3 (& mut self) -> SYSCTL_DC3_CCP3_W < 27 > { SYSCTL_DC3_CCP3_W :: new (self) } # [doc = "Bit 28 - T2CCP0 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_ccp4 (& mut self) -> SYSCTL_DC3_CCP4_W < 28 > { SYSCTL_DC3_CCP4_W :: new (self) } # [doc = "Bit 29 - T2CCP1 Pin Present"] # [inline (always)] # [must_use] pub fn sysctl_dc3_ccp5 (& mut self) -> SYSCTL_DC3_CCP5_W < 29 > { SYSCTL_DC3_CCP5_W :: new (self) } # [doc = "Bit 31 - 32KHz Input Clock Available"] # [inline (always)] # [must_use] pub fn sysctl_dc3_32khz (& mut self) -> SYSCTL_DC3_32KHZ_W < 31 > { SYSCTL_DC3_32KHZ_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Device Capabilities 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dc3](index.html) module"] pub struct DC3_SPEC ; impl crate :: RegisterSpec for DC3_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [dc3::R](R) reader structure"] impl crate :: Readable for DC3_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [dc3::W](W) writer structure"] impl crate :: Writable for DC3_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets DC3 to value 0"] impl crate :: Resettable for DC3_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }