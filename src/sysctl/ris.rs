# [doc = "Register `RIS` reader"] pub struct R (crate :: R < RIS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RIS_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < RIS_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < RIS_SPEC >) -> Self { R (reader) } } # [doc = "Register `RIS` writer"] pub struct W (crate :: W < RIS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < RIS_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < RIS_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < RIS_SPEC >) -> Self { W (writer) } } # [doc = "Field `SYSCTL_RIS_BOR1RIS` reader - VDD under BOR1 Raw Interrupt Status"] pub type SYSCTL_RIS_BOR1RIS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_RIS_BOR1RIS` writer - VDD under BOR1 Raw Interrupt Status"] pub type SYSCTL_RIS_BOR1RIS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RIS_SPEC , bool , O > ; # [doc = "Field `SYSCTL_RIS_MOFRIS` reader - Main Oscillator Failure Raw Interrupt Status"] pub type SYSCTL_RIS_MOFRIS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_RIS_MOFRIS` writer - Main Oscillator Failure Raw Interrupt Status"] pub type SYSCTL_RIS_MOFRIS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RIS_SPEC , bool , O > ; # [doc = "Field `SYSCTL_RIS_PLLLRIS` reader - PLL Lock Raw Interrupt Status"] pub type SYSCTL_RIS_PLLLRIS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_RIS_PLLLRIS` writer - PLL Lock Raw Interrupt Status"] pub type SYSCTL_RIS_PLLLRIS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RIS_SPEC , bool , O > ; # [doc = "Field `SYSCTL_RIS_USBPLLLRIS` reader - USB PLL Lock Raw Interrupt Status"] pub type SYSCTL_RIS_USBPLLLRIS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_RIS_USBPLLLRIS` writer - USB PLL Lock Raw Interrupt Status"] pub type SYSCTL_RIS_USBPLLLRIS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RIS_SPEC , bool , O > ; # [doc = "Field `SYSCTL_RIS_MOSCPUPRIS` reader - MOSC Power Up Raw Interrupt Status"] pub type SYSCTL_RIS_MOSCPUPRIS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_RIS_MOSCPUPRIS` writer - MOSC Power Up Raw Interrupt Status"] pub type SYSCTL_RIS_MOSCPUPRIS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RIS_SPEC , bool , O > ; # [doc = "Field `SYSCTL_RIS_VDDARIS` reader - VDDA Power OK Event Raw Interrupt Status"] pub type SYSCTL_RIS_VDDARIS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_RIS_VDDARIS` writer - VDDA Power OK Event Raw Interrupt Status"] pub type SYSCTL_RIS_VDDARIS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RIS_SPEC , bool , O > ; # [doc = "Field `SYSCTL_RIS_BOR0RIS` reader - VDD under BOR0 Raw Interrupt Status"] pub type SYSCTL_RIS_BOR0RIS_R = crate :: BitReader < bool > ; # [doc = "Field `SYSCTL_RIS_BOR0RIS` writer - VDD under BOR0 Raw Interrupt Status"] pub type SYSCTL_RIS_BOR0RIS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RIS_SPEC , bool , O > ; impl R { # [doc = "Bit 1 - VDD under BOR1 Raw Interrupt Status"] # [inline (always)] pub fn sysctl_ris_bor1ris (& self) -> SYSCTL_RIS_BOR1RIS_R { SYSCTL_RIS_BOR1RIS_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 3 - Main Oscillator Failure Raw Interrupt Status"] # [inline (always)] pub fn sysctl_ris_mofris (& self) -> SYSCTL_RIS_MOFRIS_R { SYSCTL_RIS_MOFRIS_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 6 - PLL Lock Raw Interrupt Status"] # [inline (always)] pub fn sysctl_ris_plllris (& self) -> SYSCTL_RIS_PLLLRIS_R { SYSCTL_RIS_PLLLRIS_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - USB PLL Lock Raw Interrupt Status"] # [inline (always)] pub fn sysctl_ris_usbplllris (& self) -> SYSCTL_RIS_USBPLLLRIS_R { SYSCTL_RIS_USBPLLLRIS_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - MOSC Power Up Raw Interrupt Status"] # [inline (always)] pub fn sysctl_ris_moscpupris (& self) -> SYSCTL_RIS_MOSCPUPRIS_R { SYSCTL_RIS_MOSCPUPRIS_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 10 - VDDA Power OK Event Raw Interrupt Status"] # [inline (always)] pub fn sysctl_ris_vddaris (& self) -> SYSCTL_RIS_VDDARIS_R { SYSCTL_RIS_VDDARIS_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - VDD under BOR0 Raw Interrupt Status"] # [inline (always)] pub fn sysctl_ris_bor0ris (& self) -> SYSCTL_RIS_BOR0RIS_R { SYSCTL_RIS_BOR0RIS_R :: new (((self . bits >> 11) & 1) != 0) } } impl W { # [doc = "Bit 1 - VDD under BOR1 Raw Interrupt Status"] # [inline (always)] # [must_use] pub fn sysctl_ris_bor1ris (& mut self) -> SYSCTL_RIS_BOR1RIS_W < 1 > { SYSCTL_RIS_BOR1RIS_W :: new (self) } # [doc = "Bit 3 - Main Oscillator Failure Raw Interrupt Status"] # [inline (always)] # [must_use] pub fn sysctl_ris_mofris (& mut self) -> SYSCTL_RIS_MOFRIS_W < 3 > { SYSCTL_RIS_MOFRIS_W :: new (self) } # [doc = "Bit 6 - PLL Lock Raw Interrupt Status"] # [inline (always)] # [must_use] pub fn sysctl_ris_plllris (& mut self) -> SYSCTL_RIS_PLLLRIS_W < 6 > { SYSCTL_RIS_PLLLRIS_W :: new (self) } # [doc = "Bit 7 - USB PLL Lock Raw Interrupt Status"] # [inline (always)] # [must_use] pub fn sysctl_ris_usbplllris (& mut self) -> SYSCTL_RIS_USBPLLLRIS_W < 7 > { SYSCTL_RIS_USBPLLLRIS_W :: new (self) } # [doc = "Bit 8 - MOSC Power Up Raw Interrupt Status"] # [inline (always)] # [must_use] pub fn sysctl_ris_moscpupris (& mut self) -> SYSCTL_RIS_MOSCPUPRIS_W < 8 > { SYSCTL_RIS_MOSCPUPRIS_W :: new (self) } # [doc = "Bit 10 - VDDA Power OK Event Raw Interrupt Status"] # [inline (always)] # [must_use] pub fn sysctl_ris_vddaris (& mut self) -> SYSCTL_RIS_VDDARIS_W < 10 > { SYSCTL_RIS_VDDARIS_W :: new (self) } # [doc = "Bit 11 - VDD under BOR0 Raw Interrupt Status"] # [inline (always)] # [must_use] pub fn sysctl_ris_bor0ris (& mut self) -> SYSCTL_RIS_BOR0RIS_W < 11 > { SYSCTL_RIS_BOR0RIS_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Raw Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](index.html) module"] pub struct RIS_SPEC ; impl crate :: RegisterSpec for RIS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ris::R](R) reader structure"] impl crate :: Readable for RIS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ris::W](W) writer structure"] impl crate :: Writable for RIS_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets RIS to value 0"] impl crate :: Resettable for RIS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }