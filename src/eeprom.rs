# [doc = r"Register block"] # [repr (C)] pub struct RegisterBlock { # [doc = "0x00 - EEPROM Size Information"] pub eesize : EESIZE , # [doc = "0x04 - EEPROM Current Block"] pub eeblock : EEBLOCK , # [doc = "0x08 - EEPROM Current Offset"] pub eeoffset : EEOFFSET , _reserved3 : [u8 ; 0x04] , # [doc = "0x10 - EEPROM Read-Write"] pub eerdwr : EERDWR , # [doc = "0x14 - EEPROM Read-Write with Increment"] pub eerdwrinc : EERDWRINC , # [doc = "0x18 - EEPROM Done Status"] pub eedone : EEDONE , # [doc = "0x1c - EEPROM Support Control and Status"] pub eesupp : EESUPP , # [doc = "0x20 - EEPROM Unlock"] pub eeunlock : EEUNLOCK , _reserved8 : [u8 ; 0x0c] , # [doc = "0x30 - EEPROM Protection"] pub eeprot : EEPROT , # [doc = "0x34 - EEPROM Password"] pub eepass0 : EEPASS0 , # [doc = "0x38 - EEPROM Password"] pub eepass1 : EEPASS1 , # [doc = "0x3c - EEPROM Password"] pub eepass2 : EEPASS2 , # [doc = "0x40 - EEPROM Interrupt"] pub eeint : EEINT , _reserved13 : [u8 ; 0x0c] , # [doc = "0x50 - EEPROM Block Hide"] pub eehide : EEHIDE , _reserved14 : [u8 ; 0x2c] , # [doc = "0x80 - EEPROM Debug Mass Erase"] pub eedbgme : EEDBGME , _reserved15 : [u8 ; 0x0f3c] , # [doc = "0xfc0 - EEPROM Peripheral Properties"] pub pp : PP , } # [doc = "EESIZE (rw) register accessor: an alias for `Reg<EESIZE_SPEC>`"] pub type EESIZE = crate :: Reg < eesize :: EESIZE_SPEC > ; # [doc = "EEPROM Size Information"] pub mod eesize ; # [doc = "EEBLOCK (rw) register accessor: an alias for `Reg<EEBLOCK_SPEC>`"] pub type EEBLOCK = crate :: Reg < eeblock :: EEBLOCK_SPEC > ; # [doc = "EEPROM Current Block"] pub mod eeblock ; # [doc = "EEOFFSET (rw) register accessor: an alias for `Reg<EEOFFSET_SPEC>`"] pub type EEOFFSET = crate :: Reg < eeoffset :: EEOFFSET_SPEC > ; # [doc = "EEPROM Current Offset"] pub mod eeoffset ; # [doc = "EERDWR (rw) register accessor: an alias for `Reg<EERDWR_SPEC>`"] pub type EERDWR = crate :: Reg < eerdwr :: EERDWR_SPEC > ; # [doc = "EEPROM Read-Write"] pub mod eerdwr ; # [doc = "EERDWRINC (rw) register accessor: an alias for `Reg<EERDWRINC_SPEC>`"] pub type EERDWRINC = crate :: Reg < eerdwrinc :: EERDWRINC_SPEC > ; # [doc = "EEPROM Read-Write with Increment"] pub mod eerdwrinc ; # [doc = "EEDONE (rw) register accessor: an alias for `Reg<EEDONE_SPEC>`"] pub type EEDONE = crate :: Reg < eedone :: EEDONE_SPEC > ; # [doc = "EEPROM Done Status"] pub mod eedone ; # [doc = "EESUPP (rw) register accessor: an alias for `Reg<EESUPP_SPEC>`"] pub type EESUPP = crate :: Reg < eesupp :: EESUPP_SPEC > ; # [doc = "EEPROM Support Control and Status"] pub mod eesupp ; # [doc = "EEUNLOCK (rw) register accessor: an alias for `Reg<EEUNLOCK_SPEC>`"] pub type EEUNLOCK = crate :: Reg < eeunlock :: EEUNLOCK_SPEC > ; # [doc = "EEPROM Unlock"] pub mod eeunlock ; # [doc = "EEPROT (rw) register accessor: an alias for `Reg<EEPROT_SPEC>`"] pub type EEPROT = crate :: Reg < eeprot :: EEPROT_SPEC > ; # [doc = "EEPROM Protection"] pub mod eeprot ; # [doc = "EEPASS0 (rw) register accessor: an alias for `Reg<EEPASS0_SPEC>`"] pub type EEPASS0 = crate :: Reg < eepass0 :: EEPASS0_SPEC > ; # [doc = "EEPROM Password"] pub mod eepass0 ; # [doc = "EEPASS1 (rw) register accessor: an alias for `Reg<EEPASS1_SPEC>`"] pub type EEPASS1 = crate :: Reg < eepass1 :: EEPASS1_SPEC > ; # [doc = "EEPROM Password"] pub mod eepass1 ; # [doc = "EEPASS2 (rw) register accessor: an alias for `Reg<EEPASS2_SPEC>`"] pub type EEPASS2 = crate :: Reg < eepass2 :: EEPASS2_SPEC > ; # [doc = "EEPROM Password"] pub mod eepass2 ; # [doc = "EEINT (rw) register accessor: an alias for `Reg<EEINT_SPEC>`"] pub type EEINT = crate :: Reg < eeint :: EEINT_SPEC > ; # [doc = "EEPROM Interrupt"] pub mod eeint ; # [doc = "EEHIDE (rw) register accessor: an alias for `Reg<EEHIDE_SPEC>`"] pub type EEHIDE = crate :: Reg < eehide :: EEHIDE_SPEC > ; # [doc = "EEPROM Block Hide"] pub mod eehide ; # [doc = "EEDBGME (rw) register accessor: an alias for `Reg<EEDBGME_SPEC>`"] pub type EEDBGME = crate :: Reg < eedbgme :: EEDBGME_SPEC > ; # [doc = "EEPROM Debug Mass Erase"] pub mod eedbgme ; # [doc = "PP (rw) register accessor: an alias for `Reg<PP_SPEC>`"] pub type PP = crate :: Reg < pp :: PP_SPEC > ; # [doc = "EEPROM Peripheral Properties"] pub mod pp ;