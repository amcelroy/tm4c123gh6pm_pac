# [doc = "Register `INT` reader"] pub struct R (crate :: R < INT_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < INT_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < INT_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < INT_SPEC >) -> Self { R (reader) } } # [doc = "Register `INT` writer"] pub struct W (crate :: W < INT_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < INT_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < INT_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < INT_SPEC >) -> Self { W (writer) } } # [doc = "Field `CAN_INT_INTID` reader - Interrupt Identifier"] pub type CAN_INT_INTID_R = crate :: FieldReader < u16 , CAN_INT_INTID_A > ; # [doc = "Interrupt Identifier\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u16)] pub enum CAN_INT_INTID_A { # [doc = "0: No interrupt pending"] CAN_INT_INTID_NONE = 0 , # [doc = "32768: Status Interrupt"] CAN_INT_INTID_STATUS = 32768 , } impl From < CAN_INT_INTID_A > for u16 { # [inline (always)] fn from (variant : CAN_INT_INTID_A) -> Self { variant as _ } } impl CAN_INT_INTID_R { # [doc = "Get enumerated values variant"] # [inline (always)] pub fn variant (& self) -> Option < CAN_INT_INTID_A > { match self . bits { 0 => Some (CAN_INT_INTID_A :: CAN_INT_INTID_NONE) , 32768 => Some (CAN_INT_INTID_A :: CAN_INT_INTID_STATUS) , _ => None , } } # [doc = "Checks if the value of the field is `CAN_INT_INTID_NONE`"] # [inline (always)] pub fn is_can_int_intid_none (& self) -> bool { * self == CAN_INT_INTID_A :: CAN_INT_INTID_NONE } # [doc = "Checks if the value of the field is `CAN_INT_INTID_STATUS`"] # [inline (always)] pub fn is_can_int_intid_status (& self) -> bool { * self == CAN_INT_INTID_A :: CAN_INT_INTID_STATUS } } # [doc = "Field `CAN_INT_INTID` writer - Interrupt Identifier"] pub type CAN_INT_INTID_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , INT_SPEC , u16 , CAN_INT_INTID_A , 16 , O > ; impl < 'a , const O : u8 > CAN_INT_INTID_W < 'a , O > { # [doc = "No interrupt pending"] # [inline (always)] pub fn can_int_intid_none (self) -> & 'a mut W { self . variant (CAN_INT_INTID_A :: CAN_INT_INTID_NONE) } # [doc = "Status Interrupt"] # [inline (always)] pub fn can_int_intid_status (self) -> & 'a mut W { self . variant (CAN_INT_INTID_A :: CAN_INT_INTID_STATUS) } } impl R { # [doc = "Bits 0:15 - Interrupt Identifier"] # [inline (always)] pub fn can_int_intid (& self) -> CAN_INT_INTID_R { CAN_INT_INTID_R :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15 - Interrupt Identifier"] # [inline (always)] # [must_use] pub fn can_int_intid (& mut self) -> CAN_INT_INTID_W < 0 > { CAN_INT_INTID_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "CAN Interrupt\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [int](index.html) module"] pub struct INT_SPEC ; impl crate :: RegisterSpec for INT_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [int::R](R) reader structure"] impl crate :: Readable for INT_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [int::W](W) writer structure"] impl crate :: Writable for INT_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets INT to value 0"] impl crate :: Resettable for INT_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }